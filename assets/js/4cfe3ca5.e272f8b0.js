"use strict";(self.webpackChunktech_foundations=self.webpackChunktech_foundations||[]).push([[40],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||a;return n?o.createElement(h,l(l({ref:t},u),{},{components:n})):o.createElement(h,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},89865:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return c}});var o=n(87462),r=n(63366),a=(n(67294),n(3905)),l=["components"],i={sidebar_position:1},s="Coding flow",p={unversionedId:"programming/control-flow/coding-flow",id:"programming/control-flow/coding-flow",isDocsHomePage:!1,title:"Coding flow",description:"Summary",source:"@site/docs/programming/control-flow/coding-flow.md",sourceDirName:"programming/control-flow",slug:"/programming/control-flow/coding-flow",permalink:"/tech-foundations-learner-guide/docs/programming/control-flow/coding-flow",editUrl:"https://github.com/generation-org/tech-foundations/edit/main/docs/programming/control-flow/coding-flow.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"programmingSidebar",previous:{title:"Drawing flow",permalink:"/tech-foundations-learner-guide/docs/programming/control-flow/drawing-flow"},next:{title:"Algorithms",permalink:"/tech-foundations-learner-guide/docs/programming/algorithms"}},u=[{value:"Summary",id:"summary",children:[{value:"Objectives",id:"objectives",children:[],level:3},{value:"Key Points",id:"key-points",children:[],level:3}],level:2},{value:"Breakdown",id:"breakdown",children:[{value:"Control Flow",id:"control-flow",children:[],level:3},{value:"Comparisons",id:"comparisons",children:[],level:3},{value:"Branching",id:"branching",children:[],level:3},{value:"Loops",id:"loops",children:[{value:"While loops",id:"while-loops",children:[],level:4},{value:"For loops",id:"for-loops",children:[],level:4}],level:3}],level:2}],m={toc:u};function c(e){var t=e.components,n=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"coding-flow"},"Coding flow"),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("h3",{id:"objectives"},"Objectives"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"By the end of this session you should be able to:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Explain what control flow is, and how flow can be manipulated using:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"For and While Loops"),(0,a.kt)("li",{parentName:"ul"},"If statements"))),(0,a.kt)("li",{parentName:"ul"},"Demonstrate common comparisons that can be used in control flow statements")),(0,a.kt)("h3",{id:"key-points"},"Key Points"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Control Flow comprises of the rules that tell a computer to do things conditionally and repetitively"),(0,a.kt)("li",{parentName:"ul"},"In code, programmers create:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Branching using if statements"),(0,a.kt)("li",{parentName:"ul"},"Repetition using for and while loops"))),(0,a.kt)("li",{parentName:"ul"},"We use comparisons to make decisions in Control Flow")),(0,a.kt)("h2",{id:"breakdown"},"Breakdown"),(0,a.kt)("h3",{id:"control-flow"},"Control Flow"),(0,a.kt)("p",null,"Control flow is the order in which individual instructions in a program are executed, and it can be visualised as a flowchart. We can manipulate control flow to run instructions repeatedly (more than one time) and conditionally (if certain criteria are met). By default, most computer programs run instructions one line at a time, starting at the top."),(0,a.kt)("h3",{id:"comparisons"},"Comparisons"),(0,a.kt)("p",null,"Comparisons are statements that evaluate to either ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"False"),", and rely on ",(0,a.kt)("em",{parentName:"p"},"comparison operators"),". Comparison operators can be placed between two values to form a statement - the program then ",(0,a.kt)("em",{parentName:"p"},"evaluates")," whether that statement is true or not. Common comparison operators include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"=="),', or "equal". ',(0,a.kt)("inlineCode",{parentName:"li"},"7 == 7")," would evaluate to ",(0,a.kt)("inlineCode",{parentName:"li"},"True"),", because both values are equal."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"!="),', or "not equal". ',(0,a.kt)("inlineCode",{parentName:"li"},"7 != 7")," would evaluate to ",(0,a.kt)("inlineCode",{parentName:"li"},"False"),", because both values are ",(0,a.kt)("em",{parentName:"li"},"not")," not equal."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"<")," and ",(0,a.kt)("inlineCode",{parentName:"li"},">"),', or "less than" and "more than". ',(0,a.kt)("inlineCode",{parentName:"li"},"7 > 7")," would evaluate to ",(0,a.kt)("inlineCode",{parentName:"li"},"False"),", because ",(0,a.kt)("inlineCode",{parentName:"li"},"7")," is not more than ",(0,a.kt)("inlineCode",{parentName:"li"},"7"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"<=")," and ",(0,a.kt)("inlineCode",{parentName:"li"},">="),', or "less than or equal to" and "more than or equal to". ',(0,a.kt)("inlineCode",{parentName:"li"},"7 >= 7")," would evaluate to ",(0,a.kt)("inlineCode",{parentName:"li"},"True"),", because ",(0,a.kt)("inlineCode",{parentName:"li"},"7")," is more than or equal to ",(0,a.kt)("inlineCode",{parentName:"li"},"7"),".")),(0,a.kt)("h3",{id:"branching"},"Branching"),(0,a.kt)("p",null,'An if statement allows us to use comparisons as conditional "gates"; if the comparison evaluates to ',(0,a.kt)("inlineCode",{parentName:"p"},"True")," then the associated instructions are executed, if it evaluates to ",(0,a.kt)("inlineCode",{parentName:"p"},"False"),' then it does not. If statements can also have "else if" and "else" clauses, which give further branch options; these are optional. Consider this example:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'doorbell = input("Who is it?")\nif doorbell == "Peter":\n  print("Welcome home!")\nelif doorbell == "Paul":\n  print("Paul, you\'ve got the wrong door again. Your house is next door.")\nelse:\n  print("Welcome, visitor!")\n')),(0,a.kt)("p",null,"From this code we can see that Peter, who owns this house, has written a little script to welcome him home - and to welcome visitors, too. However, if Paul (his neighbour) rings the doorbell it will politely remind him that he has the wrong house."),(0,a.kt)("h3",{id:"loops"},"Loops"),(0,a.kt)("p",null,"Loops are a way to run a block of code many times. Two common loops are the ",(0,a.kt)("em",{parentName:"p"},"while")," loop and the ",(0,a.kt)("em",{parentName:"p"},"for")," loop."),(0,a.kt)("h4",{id:"while-loops"},"While loops"),(0,a.kt)("p",null,"While loops run the block of code ",(0,a.kt)("em",{parentName:"p"},"while")," a condition is true. Consider this example, which will run infinitely (since ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," will always evaluate to ",(0,a.kt)("inlineCode",{parentName:"p"},"True"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'while True:\n  print("This will run forever")\n')),(0,a.kt)("p",null,"More commonly, while loops have comparison statements that eventually evaluate to false:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'while bottles != 0:\n  print(bottles + "green bottles, hanging on the wall")\n  bottles = bottles - 1\n')),(0,a.kt)("h4",{id:"for-loops"},"For loops"),(0,a.kt)("p",null,"For loops iterate through every item in a range, such as a list. This is possible in a while loop, but for loops are more suited to some tasks:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'bottles = ["Ten", "Nine", "Eight", "Seven", "Six", "Five", "Four", "Three", "Two", "One"]\nfor bottle in bottles:\n  print(bottle + "green bottles, hanging on the wall")\n')))}c.isMDXComponent=!0}}]);